package NGO2024;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import NGO2024.Validering;
import java.util.logging.Level;
import java.util.logging.Logger;
import oru.inf.InfException;
import java.util.*;
import oru.inf.InfDB;

/**
 * Klass som lägger till ny personal. TODO Validera altl och tänk ett steg
 * ytterligare på formateringen. Troligen bör den gå igenom någon typ av
 * validering den med. Möjligen att vi skriver att char at index 4/7 MÅSTE vara
 * - Char at 1 , 2 , 3, 5 , 6 , 8, 9 måste vara int eller char 0123456789. Kan
 * göras med en loop! en ifFound loop som returnar true. plus logik WIP
 *
 * @author Cyrus
 * @version 10/05/2024
 */
public class NewLand extends javax.swing.JFrame {

    private InfDB idb;
    private static String userAid;
    private static Validering validering;

    /**
     * Creates new form newPersonel
     *
     * @throws oru.inf.InfException
     */
    public NewLand(String userAid) throws InfException {

        this.userAid = userAid;
        validering = new Validering();

        try {
            idb = new InfDB("ngo_2024", "3306", "dbAdmin2024", "dbAdmin2024PW");

        } catch (InfException ex) {
            Logger.getLogger(NewLand.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        wrongFormat.setVisible(false);
    }

    /* public String setUserName() throws InfException{
    String userName = idb.fetchSingle("select concat(fornamn, efternamn) from anstalld where aid ="+userAid+";");
    return userName;
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        countryName = new javax.swing.JTextField();
        createButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        timezoneField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        politicField = new javax.swing.JTextArea();
        languageField = new javax.swing.JTextField();
        currencyField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        economicField = new javax.swing.JTextArea();
        wrongFormat = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        countryName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                countryNameMouseClicked(evt);
            }
        });
        countryName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countryNameActionPerformed(evt);
            }
        });

        createButton.setText("Skapa");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Nytt land");

        timezoneField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                timezoneFieldMouseClicked(evt);
            }
        });
        timezoneField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timezoneFieldActionPerformed(evt);
            }
        });

        politicField.setColumns(20);
        politicField.setRows(5);
        jScrollPane1.setViewportView(politicField);

        languageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageFieldActionPerformed(evt);
            }
        });

        economicField.setColumns(20);
        economicField.setRows(5);
        jScrollPane2.setViewportView(economicField);

        wrongFormat.setText("Valuta fel format.");

        errorLabel.setForeground(new java.awt.Color(244, 22, 22));

        jLabel2.setText("Namn");

        jLabel3.setText("Politiskt struktur");

        jLabel4.setText("Ekonomisk struktur");

        jLabel5.setText("Valuta");

        jLabel6.setText("Tidszon");

        jLabel7.setText("Språk");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(countryName, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 374, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(timezoneField)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(languageField, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                    .addComponent(currencyField))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wrongFormat)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(countryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(wrongFormat)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timezoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(languageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(createButton)))
                        .addGap(81, 81, 81))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void countryNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_countryNameMouseClicked
        if (countryName.getText().equals("Name")) {
            countryName.setText("");
        }
    }//GEN-LAST:event_countryNameMouseClicked

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        String newCountryName = countryName.getText().trim();
        String newPolitical = politicField.getText().trim();
        String newEconomic = economicField.getText().trim();
        String newCurrency = currencyField.getText().trim();
        String newTimeZone = timezoneField.getText().trim();
        String newLanguage = languageField.getText().trim();

        //TODO
        String newLid;
        ArrayList<String> errorList = new ArrayList<>();
        boolean errorFound = false;

        try {
            newLid = idb.getAutoIncrement("land", "lid");
            String sqlQuerry = ("INSERT INTO ngo_2024.land (lid) VALUES (" + newLid + ");");
            idb.insert(sqlQuerry);

            if (validering.fieldValidation(newCountryName, "Land namn")) {
                insertValue("namn", newCountryName, newLid);
            } else {
                insertValue("namn", "ej angivet", newLid);
                errorList.add("namn");
                errorFound = true;
            }

            if (validering.fieldValidation(newPolitical, "Politisk struktur")) {
                insertValue("politisk_struktur", newPolitical, newLid);
            } else {
                insertValue("politisk_struktur", "ej angivet", newLid);
                errorList.add("politisk struktur");
                errorFound = true;
            }
            if (validering.fieldValidation(newEconomic, "Ekonomisk struktur")) {
                insertValue("ekonomi", newEconomic, newLid);
            } else {
                insertValue("ekonomi", "ej angivet", newLid);
                errorList.add("ekonomisk struktur");
                errorFound = true;
            }
            if (validering.fieldValidation(newTimeZone, "Tidszon")) {
                insertValue("tidszon", newTimeZone, newLid);
            } else {
                insertValue("tidszon", "ej angivet", newLid);
                errorList.add("tidszon");
                errorFound = true;
            }

            if (validering.fieldValidation(newLanguage, "Språk")) {
                insertValue("sprak", newLanguage, newLid);
            } else {
                insertValue("sprak", "ej angivet", newLid);
                errorList.add("språk");
                errorFound = true;
            }

            if (validering.fieldValidation(newCurrency, "Valuta")) {
                if (newCurrency.contains(".")) {
                    insertValue("valuta", newCurrency, newLid);
                } else {
                    wrongFormat.setVisible(true);
                    insertValue("valuta", "0.0", newLid);
                    errorList.add("valuta");
                    errorFound = true;
                }
            } else {
                insertValue("valuta", "0.0", newLid);
                errorList.add("valuta");
                errorFound = true;
            }

            if (errorFound) {
                errorLabel.setText(insertError(errorList));
            }
        } catch (InfException ex) {
            Logger.getLogger(NewLand.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private String insertError(ArrayList<String> errorList) {
        if (errorList == null || errorList.isEmpty()) {
            return "Inga felaktiga värden hittades.";
        }

        StringBuilder message = new StringBuilder();
        for (int i = 0; i < errorList.size(); i++) {
            if (i > 0) {
                message.append(", ");
            }
            message.append(errorList.get(i));
        }

        return "Följande rutor hade felaktiga värden: " + message.toString();
    }
    private void timezoneFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_timezoneFieldMouseClicked
        if (timezoneField.getText().equals("City")) {
            timezoneField.setText("");
        }
    }//GEN-LAST:event_timezoneFieldMouseClicked

    private void countryNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countryNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_countryNameActionPerformed

    private void timezoneFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timezoneFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timezoneFieldActionPerformed

    private void languageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_languageFieldActionPerformed

    private void insertValue(String column, String value, String newLid) throws InfException {
        String sqlQuerry = ("UPDATE ngo_2024.land t SET t." + column + " = '" + value + "' WHERE t.lid = " + newLid + ";");
        idb.update(sqlQuerry);
    }

    /**
     * TODO ändra till land
     *
     * @param newCity
     * @param newPid
     * @throws InfException
     */
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewLand.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewLand(userAid).setVisible(true);
                } catch (InfException ex) {
                    Logger.getLogger(NewLand.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField countryName;
    private javax.swing.JButton createButton;
    private javax.swing.JTextField currencyField;
    private javax.swing.JTextArea economicField;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField languageField;
    private javax.swing.JTextArea politicField;
    private javax.swing.JTextField timezoneField;
    private javax.swing.JLabel wrongFormat;
    // End of variables declaration//GEN-END:variables
}
