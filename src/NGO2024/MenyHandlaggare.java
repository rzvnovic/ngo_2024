/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package NGO2024;

import java.util.logging.Level;
import java.util.logging.Logger;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.*;

/**
 *
 * @author meldi
 */

public class MenyHandlaggare extends javax.swing.JFrame {

    private InfDB idb;
    private static String userAid;
    private validering validering;
    private String aid;

    /**
     * Creates new form MenyHandläggare
     */
    public MenyHandlaggare(String userAid) throws InfException {
        idb = new InfDB("ngo_2024", "3306", "dbAdmin2024", "dbAdmin2024PW");
        this.userAid = userAid;
        validering = new validering();

        initComponents();
        budgetField.setVisible(false);
        filterProjectsDateError.setVisible(false);
        dateFormatWrongError.setVisible(false);
        felmeddelandeL.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        HandläggarMeny = new javax.swing.JTabbedPane();
        profilTab = new javax.swing.JPanel();
        lblInfo = new javax.swing.JLabel();
        visaKnapp = new javax.swing.JButton();
        avdelningTab = new javax.swing.JPanel();
        jLblSökHandläggare = new javax.swing.JLabel();
        avdelningSokruta = new javax.swing.JTextField();
        avdelningSok = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        personalList = new javax.swing.JLabel();
        felmeddelandeL = new javax.swing.JLabel();
        projektTab = new javax.swing.JPanel();
        jLblSökHandläggare4 = new javax.swing.JLabel();
        projektSokruta = new javax.swing.JTextField();
        projektSok = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        projectListField = new javax.swing.JTextArea();
        minaProjectField = new javax.swing.JLabel();
        showUserProjectsButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        showDeptProjectButton = new javax.swing.JButton();
        priorityBox = new javax.swing.JComboBox<>();
        totalBudgetButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        budgetField = new javax.swing.JTextPane();
        jLblMoney = new javax.swing.JLabel();
        startDateProjekt = new javax.swing.JTextField();
        endDateProjekt = new javax.swing.JTextField();
        btnFilterByDate = new javax.swing.JButton();
        filterProjectsDateError = new javax.swing.JLabel();
        dateFormatWrongError = new javax.swing.JLabel();
        samarbetspartnerTab2 = new javax.swing.JPanel();
        jLblSökHandläggare5 = new javax.swing.JLabel();
        samarbetspartnerSokruta = new javax.swing.JTextField();
        samarbetspartnerSok = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        hållbarhetsmalTab = new javax.swing.JPanel();
        jLblSökHallbarhetsmål = new javax.swing.JLabel();
        hallbarhetsmalSokruta = new javax.swing.JTextField();
        hallbarhetsmalSok = new javax.swing.JButton();
        lblAktivaHallbarhetsmal = new javax.swing.JLabel();
        scrlPanelHållbarhet = new javax.swing.JScrollPane();
        hallbarhetsMalTextArea = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblInfo.setText("Info");

        visaKnapp.setText("Visa Profil:");
        visaKnapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visaKnappActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout profilTabLayout = new javax.swing.GroupLayout(profilTab);
        profilTab.setLayout(profilTabLayout);
        profilTabLayout.setHorizontalGroup(
            profilTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilTabLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(profilTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visaKnapp)
                    .addComponent(lblInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(606, Short.MAX_VALUE))
        );
        profilTabLayout.setVerticalGroup(
            profilTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profilTabLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visaKnapp)
                .addContainerGap(386, Short.MAX_VALUE))
        );

        HandläggarMeny.addTab("Profil", profilTab);

        jLblSökHandläggare.setText("Sök Handläggare");

        avdelningSokruta.setColumns(8);

        avdelningSok.setText("Sök");
        avdelningSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avdelningSokjButton2ActionPerformed(evt);
            }
        });

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        try{
            jTextArea3.setText(fetchEmployees());
        }
        catch(Exception e){
        }
        jScrollPane3.setViewportView(jTextArea3);

        personalList.setText("Department's employees");

        felmeddelandeL.setText("CyrusAshole");

        javax.swing.GroupLayout avdelningTabLayout = new javax.swing.GroupLayout(avdelningTab);
        avdelningTab.setLayout(avdelningTabLayout);
        avdelningTabLayout.setHorizontalGroup(
            avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avdelningTabLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(avdelningTabLayout.createSequentialGroup()
                        .addComponent(jLblSökHandläggare, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(personalList, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(avdelningTabLayout.createSequentialGroup()
                        .addGroup(avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(avdelningSok)
                            .addComponent(avdelningSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(felmeddelandeL))
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)))
                .addContainerGap())
        );
        avdelningTabLayout.setVerticalGroup(
            avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(avdelningTabLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblSökHandläggare)
                    .addComponent(personalList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(avdelningTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(avdelningTabLayout.createSequentialGroup()
                        .addComponent(avdelningSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(avdelningSok)
                        .addGap(18, 18, 18)
                        .addComponent(felmeddelandeL)
                        .addGap(0, 317, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addContainerGap())
        );

        HandläggarMeny.addTab("Avdelning", avdelningTab);

        jLblSökHandläggare4.setText("Sök Projekt");

        projektSokruta.setColumns(8);

        projektSok.setText("Sök");
        projektSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projektSokjButton2ActionPerformed(evt);
            }
        });

        projectListField.setEditable(false);
        projectListField.setColumns(20);
        projectListField.setRows(5);
        try{
            projectListField.setText(fetchProject());
        }
        catch(Exception e){}
        jScrollPane1.setViewportView(projectListField);

        minaProjectField.setText("My projects");

        showUserProjectsButton.setText("Show my projects");
        showUserProjectsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUserProjectsButtonActionPerformed(evt);
            }
        });

        showDeptProjectButton.setText("Show department project");
        showDeptProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDeptProjectButtonActionPerformed(evt);
            }
        });

        priorityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Ongoing", "Planned", "Finished" }));
        priorityBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priorityBoxActionPerformed(evt);
            }
        });

        totalBudgetButton.setText("Calculate total budget");
        totalBudgetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBudgetButtonActionPerformed(evt);
            }
        });

        budgetField.setEditable(false);
        try{
            budgetField.setText(totalBudget());
        }
        catch(Exception e){}
        jScrollPane4.setViewportView(budgetField);

        jLblMoney.setText("Moneys");

        startDateProjekt.setText("Start date");

        endDateProjekt.setText("End date");

        btnFilterByDate.setText("Filter by date");
        btnFilterByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterByDateActionPerformed(evt);
            }
        });

        filterProjectsDateError.setForeground(new java.awt.Color(255, 0, 0));
        filterProjectsDateError.setText("Inga projekt inom angivna datum!");

        dateFormatWrongError.setForeground(new java.awt.Color(255, 0, 0));
        dateFormatWrongError.setText("Vänligen skriv datum i formatet yyyy-mm-dd");

        javax.swing.GroupLayout projektTabLayout = new javax.swing.GroupLayout(projektTab);
        projektTab.setLayout(projektTabLayout);
        projektTabLayout.setHorizontalGroup(
            projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projektTabLayout.createSequentialGroup()
                .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projektTabLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFilterByDate, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projektTabLayout.createSequentialGroup()
                        .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, projektTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(dateFormatWrongError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, projektTabLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(filterProjectsDateError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(projektTabLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1)
                                    .addComponent(showUserProjectsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(showDeptProjectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, projektTabLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(totalBudgetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(projektTabLayout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLblMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(projektTabLayout.createSequentialGroup()
                                        .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(projektSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(projektSok)
                                            .addComponent(jLblSökHandläggare4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(projektTabLayout.createSequentialGroup()
                                                .addComponent(startDateProjekt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(endDateProjekt, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projektTabLayout.createSequentialGroup()
                        .addComponent(minaProjectField)
                        .addGap(0, 401, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))
                .addContainerGap())
        );
        projektTabLayout.setVerticalGroup(
            projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(projektTabLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblSökHandläggare4)
                    .addComponent(minaProjectField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(projektTabLayout.createSequentialGroup()
                        .addComponent(projektSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(projektSok)
                        .addGap(19, 19, 19)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(showUserProjectsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showDeptProjectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priorityBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalBudgetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLblMoney, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addGap(40, 40, 40)
                        .addGroup(projektTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateProjekt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDateProjekt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnFilterByDate)
                        .addGap(4, 4, 4)
                        .addComponent(filterProjectsDateError)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFormatWrongError)
                        .addGap(0, 30, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        HandläggarMeny.addTab("Projekt", projektTab);

        jLblSökHandläggare5.setText("Sök Samarbetspartner");

        samarbetspartnerSokruta.setColumns(8);

        samarbetspartnerSok.setText("Sök");
        samarbetspartnerSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                samarbetspartnerSokjButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        try{
            jTextArea1.setText(fetchPartnersInProjects());
        }
        catch(Exception e){}
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout samarbetspartnerTab2Layout = new javax.swing.GroupLayout(samarbetspartnerTab2);
        samarbetspartnerTab2.setLayout(samarbetspartnerTab2Layout);
        samarbetspartnerTab2Layout.setHorizontalGroup(
            samarbetspartnerTab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samarbetspartnerTab2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(samarbetspartnerTab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(samarbetspartnerSok)
                    .addComponent(samarbetspartnerSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblSökHandläggare5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        samarbetspartnerTab2Layout.setVerticalGroup(
            samarbetspartnerTab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(samarbetspartnerTab2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(samarbetspartnerTab2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(samarbetspartnerTab2Layout.createSequentialGroup()
                        .addComponent(jLblSökHandläggare5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(samarbetspartnerSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(samarbetspartnerSok)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        HandläggarMeny.addTab("Samarbetspartner", samarbetspartnerTab2);

        jLblSökHallbarhetsmål.setText("Sök Hållbarhetsmål");

        hallbarhetsmalSokruta.setColumns(8);
        hallbarhetsmalSokruta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hallbarhetsmalSokrutaActionPerformed(evt);
            }
        });

        hallbarhetsmalSok.setText("Sök");
        hallbarhetsmalSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hallbarhetsmalSokjButton2ActionPerformed(evt);
            }
        });

        lblAktivaHallbarhetsmal.setText("Aktiva hållbarhetsmål");

        hallbarhetsMalTextArea.setEditable(false);
        hallbarhetsMalTextArea.setColumns(20);
        hallbarhetsMalTextArea.setRows(5);
        try{
            hallbarhetsMalTextArea.setText(fetchHallbarhetsmal());
        }
        catch(Exception e){}
        scrlPanelHållbarhet.setViewportView(hallbarhetsMalTextArea);

        javax.swing.GroupLayout hållbarhetsmalTabLayout = new javax.swing.GroupLayout(hållbarhetsmalTab);
        hållbarhetsmalTab.setLayout(hållbarhetsmalTabLayout);
        hållbarhetsmalTabLayout.setHorizontalGroup(
            hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hållbarhetsmalTabLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hallbarhetsmalSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hallbarhetsmalSok)
                    .addComponent(jLblSökHallbarhetsmål, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlPanelHållbarhet, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                    .addGroup(hållbarhetsmalTabLayout.createSequentialGroup()
                        .addComponent(lblAktivaHallbarhetsmal, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        hållbarhetsmalTabLayout.setVerticalGroup(
            hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hållbarhetsmalTabLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblSökHallbarhetsmål)
                    .addComponent(lblAktivaHallbarhetsmal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hållbarhetsmalTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hållbarhetsmalTabLayout.createSequentialGroup()
                        .addComponent(hallbarhetsmalSokruta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hallbarhetsmalSok)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(scrlPanelHållbarhet, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addContainerGap())
        );

        HandläggarMeny.addTab("Hållbarhetsmål", hållbarhetsmalTab);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(HandläggarMeny)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(HandläggarMeny)
                .addContainerGap())
        );

        jLabel2.setText("jLabel2");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void avdelningSokjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avdelningSokjButton2ActionPerformed
        try {
            String personalNamn = avdelningSokruta.getText();
            int index = personalNamn.indexOf(" ");
            String fornamn = personalNamn.substring(0, index);
            String efternamn = personalNamn.substring(index + 1);
            System.out.print(fornamn + efternamn);

            String sqlFraga = ("Select aid from anstalld where fornamn='" + fornamn + "' and efternamn = '" + efternamn + "';");
            String dbSqlFraga = idb.fetchSingle(sqlFraga);
            String userAvd = idb.fetchSingle("SELECT avdelning FROM anstalld WHERE aid = " + userAid + ";");
            if (validering.checkProjektLedareAid(userAid) || userAvd.equals(idb.fetchSingle("SELECT avdelning FROM anstalld WHERE aid = " + dbSqlFraga + ";"))) {
                new PersonalInfo(dbSqlFraga, userAid).setVisible(true);

            } else {
                felmeddelandeL.setText("Behörighet saknas");
                felmeddelandeL.setVisible(true);
            }

        } catch (Exception e) {

            felmeddelandeL.setText("Anställd finns ej");
            felmeddelandeL.setVisible(true);

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_avdelningSokjButton2ActionPerformed

    private void projektSokjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projektSokjButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_projektSokjButton2ActionPerformed

    private void samarbetspartnerSokjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_samarbetspartnerSokjButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_samarbetspartnerSokjButton2ActionPerformed

    private void hallbarhetsmalSokjButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hallbarhetsmalSokjButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hallbarhetsmalSokjButton2ActionPerformed

    private void hallbarhetsmalSokrutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hallbarhetsmalSokrutaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hallbarhetsmalSokrutaActionPerformed

    private void visaKnappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visaKnappActionPerformed
        // TODO add your handling code here:
        //SKA ÖPPNA UPP PERSONALINFO
        //@param UserAID, AID
        String aid = userAid; // Fungerar för syftet av denna metod.
        try {
            new PersonalInfo(aid, userAid).setVisible(true);
        } catch (InfException ex) {
            Logger.getLogger(MenyHandlaggare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_visaKnappActionPerformed

    /**
     * Sätter user projects till rutan projectListField
     *
     * @param evt
     */
    private void showUserProjectsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUserProjectsButtonActionPerformed
        try {
            int priority = priorityBox.getSelectedIndex();
            projectListField.setText(findUserProjects(priorityPicker(priority)));
        } catch (InfException ex) {
            Logger.getLogger(MenyHandlaggare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showUserProjectsButtonActionPerformed

    private void showDeptProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDeptProjectButtonActionPerformed
        try {
            int priority = priorityBox.getSelectedIndex();
            projectListField.setText(findDeptProject(priorityPicker(priority)));
        } catch (InfException ex) {
            Logger.getLogger(MenyHandlaggare.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showDeptProjectButtonActionPerformed

    private void totalBudgetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBudgetButtonActionPerformed
        budgetField.setVisible(true);
    }//GEN-LAST:event_totalBudgetButtonActionPerformed

    private void btnFilterByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterByDateActionPerformed

        try {
            String startDatumet = startDateProjekt.getText();
            String slutDatumet = endDateProjekt.getText();

            if (!validering.checkDateFormat(startDatumet) || !validering.checkDateFormat(slutDatumet)) {
                dateFormatWrongError.setVisible(true);
            }
            String resultatet = fetchProjectDates(startDatumet, slutDatumet);
            if (resultatet != null) {
                projectListField.setText(resultatet);
            } else {
                filterProjectsDateError.setVisible(true);
            }

        } catch (InfException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnFilterByDateActionPerformed

    private void priorityBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priorityBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_priorityBoxActionPerformed

    private String fetchProjectDates(String startDate, String endDate) throws InfException {

        ArrayList<String> projektNamn = idb.fetchColumn("Select projektnamn from projekt where startdatum >= '" + startDate + "' and slutdatum <= '" + endDate + "' and (status = 'Pågående' or status = 'Planerat')");
        ArrayList<String> projektBeskrivning = idb.fetchColumn("Select beskrivning from projekt where startdatum >= '" + startDate + "' and slutdatum <= '" + endDate + "' and (status = 'Pågående' or status = 'Planerat')");

        if (projektNamn.isEmpty() || projektBeskrivning.isEmpty()) {
            return null;
        }
        String message = "";
        String projectName = null;
        String projectInfo = null;

        for (int i = 0; i < projektNamn.size(); i++) {
            projectName = projektNamn.get(i);
            projectInfo = projektBeskrivning.get(i);
            message = message + "\n" + projectName + "\n" + projectInfo + "\n";
        }
        return message.trim();

    }

    private int priorityPicker(int priority) {
        if (priority == 0) {
            return 4;
        } else if (priority == 1) {
            return 3;
        } else if (priority == 2) {
            return 2;
        } else {
            return 1;
        }
    }

    /**
     * metod som lägger in varje tabelles rad på en ny rad i en textsträng.
     *
     * Kan vara värt att undersöka och endast visa de mål som är aktiva för
     * avdelning TODO DEBUGG för att se VARFÖR den skriver ut NULL
     *
     * @return message
     * @throws InfException
     */
    public String fetchHallbarhetsmal() throws InfException {
        ArrayList<String> namnLista = idb.fetchColumn("Select namn from hallbarhetsmal where namn is not null;");
        ArrayList<String> beskrivningLista = idb.fetchColumn("Select beskrivning from hallbarhetsmal where namn is not null;");

        StringBuilder message = new StringBuilder();
        for (int i = 0; i < namnLista.size(); i++) {
            message.append("\n").append(namnLista.get(i)).append("\n").append(beskrivningLista.get(i)).append("\n");
        }
        return message.toString().trim();
    }

    public String findDeptProject(int prio) throws InfException {
        String avdId = idb.fetchSingle("Select avdelning from anstalld where aid =" + userAid + ";");
        ArrayList<String> aidList = idb.fetchColumn("Select aid from anstalld where avdelning =" + avdId + ";");
        ArrayList<String> pidList = new ArrayList<String>();

        for (int i = 0; i < aidList.size(); i++) {
            String sqlQuerry = idb.fetchSingle("Select pid from ans_proj where aid =" + aidList.get(i) + ";");
            if (sqlQuerry != null && !pidList.contains(sqlQuerry)) {
                pidList.add(sqlQuerry);
            }
        }

        ArrayList<String> namnLista = new ArrayList<>();
        ArrayList<String> beskrivningsLista = new ArrayList<String>();

        try {
            for (int i = 0; i < pidList.size(); i++) {
                if (prio == 4) {
                    String sqlQuerryForLow = idb.fetchSingle("Select projektnamn from projekt where pid = " + pidList.get(i) + ";");
                    String sqlQuerryForDLow = idb.fetchSingle("Select beskrivning from projekt where pid = " + pidList.get(i) + ";");
                    if (sqlQuerryForLow != null) {
                        namnLista.add(sqlQuerryForLow);
                    }
                    if (sqlQuerryForDLow != null) {
                        beskrivningsLista.add(sqlQuerryForDLow);
                    }
                } else if (prio == 3) {
                    String sqlQuerryForLow = idb.fetchSingle("Select projektnamn from projekt where pid = " + pidList.get(i) + " and status = 'Pågågende';");
                    String sqlQuerryForDLow = idb.fetchSingle("Select beskrivning from projekt where pid = " + pidList.get(i) + " and status = 'Pågående';");
                    if (sqlQuerryForLow != null) {
                        namnLista.add(sqlQuerryForLow);
                    }
                    if (sqlQuerryForDLow != null) {
                        beskrivningsLista.add(sqlQuerryForDLow);
                    }
                } else if (prio == 2) {
                    String sqlQuerryForLow = idb.fetchSingle("Select projektnamn from projekt where pid = " + pidList.get(i) + " and status = 'Planerat';");
                    String sqlQuerryForDLow = idb.fetchSingle("Select beskrivning from projekt where pid = " + pidList.get(i) + " and status = 'Planerat';");
                    if (sqlQuerryForLow != null) {
                        namnLista.add(sqlQuerryForLow);
                    }
                    if (sqlQuerryForDLow != null) {
                        beskrivningsLista.add(sqlQuerryForDLow);
                    }
                } else {
                    String sqlQuerryForLow = idb.fetchSingle("Select projektnamn from projekt where pid = " + pidList.get(i) + " and status = 'Avslutat';");
                    String sqlQuerryForDLow = idb.fetchSingle("Select beskrivning from projekt where pid = " + pidList.get(i) + " and status = 'Avslutat';");
                    if (sqlQuerryForLow != null) {
                        namnLista.add(sqlQuerryForLow);
                    }
                    if (sqlQuerryForDLow != null) {

                        beskrivningsLista.add(sqlQuerryForDLow);
                    }
                }
            }
            }catch (Exception e) {
            System.out.println("querry error");
        }
            String message = "";
            String contentName = null;
            String contentBesk = null;
            for (int i = 0; i < namnLista.size(); i++) {
                contentName = namnLista.get(i);
                contentBesk = beskrivningsLista.get(i);
                message = message + "\n" + contentName + "\n" + contentBesk + "\n";
            }
            if (!message.contains("null")) {
                return message.trim();
            } else {
                return "No current projects.";
            }
        }
        /**
         * Metod som returnar en message med projekt som ANVÄNDAREN har koppling
         * till. Kallas med knapptryck "Visa mina projekt" / "Show my projects"
         * Kan vara värt att göra innehåll till en metod då de repeteras.
         *
         * @return String message
         * @throws InfException
         */
    public String findUserProjects(int prio) throws InfException {
        ArrayList<String> userProjectList = idb.fetchColumn("Select pid from ans_proj where aid = " + userAid + ";");
        ArrayList<String> userNamnLista = new ArrayList<String>();
        ArrayList<String> userBeskrivningsLista = new ArrayList<String>();

        for (int i = 0; i < userProjectList.size(); i++) {
            if (prio == 4) {
                userNamnLista.add(idb.fetchSingle("Select projektnamn from projekt where pid = " + userProjectList.get(i) + " and projektnamn is not null;"));
                userBeskrivningsLista.add(idb.fetchSingle("Select beskrivning from projekt where pid = " + userProjectList.get(i) + " and beskrivning is not null;"));

            } else if (prio == 3) {
                userNamnLista.add(idb.fetchSingle("Select projektnamn from projekt where pid = " + userProjectList.get(i) + " and status = 'Pågående' and projektnamn is not null;"));
                userBeskrivningsLista.add(idb.fetchSingle("Select beskrivning from projekt where pid = " + userProjectList.get(i) + " and status = 'Pågående' and beskrivning is not null;"));
            } else if (prio == 2) {
                userNamnLista.add(idb.fetchSingle("Select projektnamn from projekt where pid = " + userProjectList.get(i) + " and status = 'Planerat' and projektnamn is not null;"));
                userBeskrivningsLista.add(idb.fetchSingle("Select beskrivning from projekt where pid = " + userProjectList.get(i) + " and status = 'Planerat' and beskrivning is not null;"));
            } else {
                userNamnLista.add(idb.fetchSingle("Select projektnamn from projekt where pid = " + userProjectList.get(i) + " and status = 'Avslutat' and projektnamn is not null;"));
                userBeskrivningsLista.add(idb.fetchSingle("Select beskrivning from projekt where pid = " + userProjectList.get(i) + " and status = 'Avslutat' and beskrivning is not null;"));

            }
        }
        String message = "";
        String contentName = null;
        String contentBesk = null;
        for (int i = 0; i < userNamnLista.size(); i++) {
            contentName = userNamnLista.get(i);
            contentBesk = userBeskrivningsLista.get(i);
            message = message + "\n" + contentName + "\n" + contentBesk + "\n";
        }
        if (!message.contains("null")) {
            return message.trim();
        } else {
            return "No current projects.";
        }
    }

    public String fetchPartnersInProjects() throws InfException {
        ArrayList<String> samarbetsPartnerNamn = idb.fetchColumn("select namn from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid = '" + userAid + "')))");
        ArrayList<String> samarbetsPartnerKontaktPerson = idb.fetchColumn("select kontaktperson from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid ='" + userAid + "')))");
        ArrayList<String> samarbetsPartnerKontaktEpost = idb.fetchColumn("select kontaktepost from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid ='" + userAid + "')))");
        ArrayList<String> samarbetsPartnerTelefon = idb.fetchColumn("select telefon from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid = '" + userAid + "')))");
        ArrayList<String> samarbetsPartnerAdress = idb.fetchColumn("select adress from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid ='" + userAid + "')))");
        ArrayList<String> samarbetsPartnerBranch = idb.fetchColumn("select branch from partner where pid in (select partner_pid from projekt_partner where pid in (select pid from ans_proj where aid in (select aid from anstalld where aid ='" + userAid + "')))");
        StringBuilder message = new StringBuilder();
        for (int i = 0; i < samarbetsPartnerNamn.size(); i++) {
            message.append("\nNamn: ").append(samarbetsPartnerNamn.get(i))
                    .append("\nKontaktperson: ").append(samarbetsPartnerKontaktPerson.get(i))
                    .append("\nEpost: ").append(samarbetsPartnerKontaktEpost.get(i))
                    .append("\nTelefon: ").append(samarbetsPartnerTelefon.get(i)).append("\nAdress: ").append(samarbetsPartnerAdress.get(i)).append("\nBranch: ").append(samarbetsPartnerBranch.get(i)).append("\n");
        }

        return message.toString().trim();

    
}

    /**
     * Ej nöjd.
     *
     * Lägg till param (-1.alla, 0.dina, 1.avdelning)
     *
     *
     * @return
     * @throws InfException
     */
    public String fetchProject() throws InfException {
    ArrayList<String> projektNamnLista = idb.fetchColumn("Select projektnamn from projekt;");
    ArrayList<String> projektBeskrivningLista = idb.fetchColumn("Select beskrivning from projekt;");
    ArrayList<String> projektStartdatum = idb.fetchColumn("Select startdatum from projekt;");
    ArrayList<String> projektSlutdatum = idb.fetchColumn("Select slutdatum from projekt;");
    ArrayList<String> projektKostnad = idb.fetchColumn("Select kostnad from projekt;");
    ArrayList<String> projektStatus = idb.fetchColumn("Select status from projekt;");
    ArrayList<String> projektPrioritet = idb.fetchColumn("Select prioritet from projekt;");
    ArrayList<String> projektLedareFornamn = idb.fetchColumn("select fornamn from anstalld where aid in (select projektchef from projekt);");
    ArrayList<String> projektLedareEfternamn = idb.fetchColumn("select efternamn from anstalld where aid in (select projektchef from projekt);");

    String message = "";
    String nameMessage = "Projektnamn: ";
    String descriptionMessage = "Beskrivning: ";
    String startMessage = "Startdatum: ";
    String endMessage = "Slutdatum: ";
    String costMessage = "Kostnad: ";
    String statusMessage = "Status: ";
    String priorityMessage = "Prioritet: ";
    String leaderMessage = "Projektchef: ";
    String contentName = null;
    String contentBesk = null;
    String contentStart = null;
    String contentEnd = null;
    String contentCost = null;
    String contentStatus = null;
    String contentPriority = null;
    String contentLeaderFirst = null;
    String contentLeaderLast = null;

    for (int i = 0; i < projektNamnLista.size(); i++) {
        contentName = projektNamnLista.get(i);
        contentBesk = projektBeskrivningLista.get(i);
        contentStart = projektStartdatum.get(i);
        contentEnd = projektSlutdatum.get(i);
        contentCost = projektKostnad.get(i);
        contentStatus = projektStatus.get(i);
        contentPriority = projektPrioritet.get(i);
        contentLeaderFirst = projektLedareFornamn.get(i);
        contentLeaderLast = projektLedareEfternamn.get(i);
        message = message + "\n" + nameMessage + contentName + "\n" + descriptionMessage + contentBesk + "\n" + startMessage + contentStart + "\n" + endMessage + contentEnd + "\n" + costMessage + contentCost + "\n" + statusMessage + contentStatus + "\n" + priorityMessage + contentPriority + "\n" + leaderMessage + contentLeaderFirst + " " + contentLeaderLast + "\n";
    }

    return message.trim();
}

    /**
     * Metod som räknar ut användrens totala budget över alla rader där AID
     * förkommer.
     *
     * @return String totalabudget
     * @throws InfException
     */
    public String totalBudget() throws InfException {
    ArrayList<String> userProjectList = idb.fetchColumn("Select pid from ans_proj where aid = " + userAid + ";");
    double totalBudget = 0;
    for (int i = 0; i < userProjectList.size(); i++) {
        totalBudget += Double.parseDouble(idb.fetchSingle("Select kostnad from projekt where pid = " + userProjectList.get(i) + " and kostnad is not null;"));
    }
    return "" + totalBudget;
}

    /**
     * SKA BARA VISA PÅ RÄTT AVDELNING SÅ SQL QUERRY bör ändras till where avdId
     * = userAid's avdId
     *
     * @return message
     * @throws InfException
     */
    public String fetchEmployees() throws InfException {
    String sqlFråga = "select avdelning from anstalld where aid = " + userAid;
    ArrayList<String> fNamnLista = idb.fetchColumn("Select fornamn from anstalld where avdelning = " + idb.fetchSingle(sqlFråga));
    ArrayList<String> eNamnLista = idb.fetchColumn("Select efternamn from anstalld where avdelning = " + idb.fetchSingle(sqlFråga));

    String message = "";
    String contentFName = null;
    String contentEName = null;
    for (int i = 0; i < fNamnLista.size(); i++) {
        contentFName = fNamnLista.get(i);
        contentEName = eNamnLista.get(i);
        message = message + "\n" + contentFName + " " + contentEName + "\n";
    }
    return message.trim();
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(MenyHandlaggare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(MenyHandlaggare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(MenyHandlaggare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(MenyHandlaggare.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            try {
                new MenyHandlaggare(userAid).setVisible(true);
            } catch (InfException ex) {
                Logger.getLogger(MenyHandlaggare.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane HandläggarMeny;
    private javax.swing.JButton avdelningSok;
    private javax.swing.JTextField avdelningSokruta;
    private javax.swing.JPanel avdelningTab;
    private javax.swing.JButton btnFilterByDate;
    private javax.swing.JTextPane budgetField;
    private javax.swing.JLabel dateFormatWrongError;
    private javax.swing.JTextField endDateProjekt;
    private javax.swing.JLabel felmeddelandeL;
    private javax.swing.JLabel filterProjectsDateError;
    private javax.swing.JTextArea hallbarhetsMalTextArea;
    private javax.swing.JButton hallbarhetsmalSok;
    private javax.swing.JTextField hallbarhetsmalSokruta;
    private javax.swing.JPanel hållbarhetsmalTab;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLblMoney;
    private javax.swing.JLabel jLblSökHallbarhetsmål;
    private javax.swing.JLabel jLblSökHandläggare;
    private javax.swing.JLabel jLblSökHandläggare4;
    private javax.swing.JLabel jLblSökHandläggare5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JLabel lblAktivaHallbarhetsmal;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel minaProjectField;
    private javax.swing.JLabel personalList;
    private javax.swing.JComboBox<String> priorityBox;
    private javax.swing.JPanel profilTab;
    private javax.swing.JTextArea projectListField;
    private javax.swing.JButton projektSok;
    private javax.swing.JTextField projektSokruta;
    private javax.swing.JPanel projektTab;
    private javax.swing.JButton samarbetspartnerSok;
    private javax.swing.JTextField samarbetspartnerSokruta;
    private javax.swing.JPanel samarbetspartnerTab2;
    private javax.swing.JScrollPane scrlPanelHållbarhet;
    private javax.swing.JButton showDeptProjectButton;
    private javax.swing.JButton showUserProjectsButton;
    private javax.swing.JTextField startDateProjekt;
    private javax.swing.JButton totalBudgetButton;
    private javax.swing.JButton visaKnapp;
    // End of variables declaration//GEN-END:variables
}
